import java.util.*;

class Graph {
    Map<String, Set<String>> adjList;
    String startStation;
    String destStation;
    boolean visited[];

    Graph() {
        adjList = new HashMap<>();
        //queue = new LinkedList<>();
    }

    void addEdge(String src, String dest) {

        // if src is not a key, we make a new set for src and it's new values
        if ( !adjList.containsKey(src) )
            adjList.put(src, new HashSet<>());

        // Add dest to the set of src
        adjList.get(src).add(dest);

        // if dest is not a key, we make a new set for dest and it's new values
        if ( !adjList.containsKey(dest) )
            adjList.put(dest, new HashSet<>());

        // Add src to the set of dest
        adjList.get(dest).add(src);
    }

    void BFS(Graph g, String src) {

        // Check if src does not exist (no route from src)
        if ( src == null ) {
            System.out.println("no route found");
            return;
        }
        // Create the queue and add the first node
        LinkedList<String> queue = new LinkedList<>();
        queue.add(src);

        while ( !queue.isEmpty() ) {
            String currentFirst = queue.removeFirst();

            // if we added a node more than once before actually visiting that node
            // we skip that node
            if ( currentFirst.visited )
                continue;

            // Mark the node as visited
            currentFirst.visited = true;

            System.out.println(currentFirst.data + " ");
            Set<String> allNeighbors = adjList.get(currentFirst);

            // we need to check if the list of neighbors is null before proceeding
            // otherwise the for each loop throws an exception

            if ( allNeighbors == null )
                continue;

            for(String neighbor : allNeighbors) {
                // we only add unvisited neighbors
                if ( !neighbor.visited ) {
                    queue.add(neighbor);
                }
            }
        }
        System.out.println();
    }

    void printGraph(Graph g) {

        for(Map.Entry<String, Set<String>> entry : adjList.entrySet() ) {
            System.out.println("Key: " + entry.getKey());
            for( String value : entry.getValue() ) {
                System.out.println(value + " ");
            }
        }
    }
}

public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int pieces = Integer.parseInt(input.nextLine());
        Graph graph = new Graph();
        for (int i = 0; i < pieces; i++) {
            String[] stations = input.nextLine().split(" ");
            System.out.println("stations[]: " + Arrays.toString(stations));
            // stations[1] ... stations[n-1] is a path from src to stations[j] so start at 1st index
            for (int j = 1; j < stations.length; j++) {
                // add edges from stations[0] to every other stations[j] on that line
                Arrays.toString(stations);
                graph.addEdge(stations[0], stations[j]);
            }
        }
        // The last line given is NOT GIVEN VIA System.in !!! Wasted all that time smh!!!!
        System.out.println();
        graph.printGraph(graph);

        //graph.addEdge(graph, "Uptown", "Midtown");
        //graph.addEdge(graph, "Uptown", "Downtown");
        //graph.addEdge(graph, "Jax", "Baldwin");
        //graph.addEdge(graph, "Jax", "Jax Beach");
        //graph.printGraph(graph);
    }

}
