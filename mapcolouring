package com.company;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Iterator;


class Graph {
    private int V; // number of vertices
    private LinkedList<Integer> adj[]; // adjacency list

    Graph(int v) {
        this.V = v;
        adj = new LinkedList[v];
        for(int i=0; i<v; i++)
            adj[i] = new LinkedList<>();
    }

    void addEdge(int source, int destination) {
        adj[source].add(destination);
    }

    // Assigns colors (starting from 0) to all vertices and prints assignment of colors
    public void greedyColoring() {

        int colors[] = new int[V];
        // Initialize all vertices as unassigned
        Arrays.fill(colors, -1);

        // Assign the first color (0) to first vertex
        colors[0] = 0;
        // boolean temp array to store available colors.
        boolean[] available = new boolean[V];

        // initially, all colors are available
        Arrays.fill(available, true);

        // Assign colors from remaining 1 to V-1 vertices
        for(int u=1; u<V-1; u++) {
            // Process all adjacent vertices and flag their colors as unavailable
            Iterator<Integer> it = adj[u].iterator();
            while ( it.hasNext() ) {
                int i = it.next();
                if ( colors[i] != -1 )
                    available[colors[i]] = false;
            }
            // Find first available color
            int clr;
            for(clr=0; clr < V; clr++) {
                if ( available[clr] )
                    break;
            }

            colors[u] = clr; // Assign first color

            // Reset the values back to true for the next iteration
            Arrays.fill(available, true);
        }
            // Print the graph
            for(int i=0; i<colors.length; i++) {
                System.out.println("Vertex " + i + " ---> Color " + colors[i]);
            }
    }

}

public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int cases = Integer.valueOf(input.nextLine());
        for (int i = 0; i < cases; i++) {
            // one line for each country (C) and the number of borders (B)
            String[] country_border = input.nextLine().split(" ");
            int country = Integer.parseInt(country_border[0]);
            int border = Integer.parseInt(country_border[1]);
            Graph graph = new Graph(country);
            for (int j = 0; j < border; j++) {
                String[] src_dest = input.nextLine().split(" ");
                int src = Integer.parseInt(src_dest[0]);
                int dest = Integer.parseInt(src_dest[1]);
                graph.addEdge(src, dest);
            }
            if (border == 0) {
                System.out.println("1");
                continue;
            }
            graph.greedyColoring();
        }
    }
}
